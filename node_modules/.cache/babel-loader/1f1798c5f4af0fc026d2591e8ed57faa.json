{"ast":null,"code":"import _ from'lodash';import jwt from'jsonwebtoken';import mock from'src/utils/mock';var JWT_SECRET='devias-top-secret-key';var JWT_EXPIRES_IN='2 days';var db={user:{id:'5e86809283e28b96d2d38537',avatar:'/static/images/avatars/avatar_6.png',bio:'Sales Manager',canHire:false,country:'USA',email:'katarina.smith@devias.io',username:'admin',password:'admin',firstName:'Katarina',isPublic:true,lastName:'Smith',phone:'+40 777666555',role:'admin',state:'New York',timezone:'4:32PM (GMT-4)'}};mock.onPost('/api/account/login').reply(function(config){var _JSON$parse=JSON.parse(config.data),email=_JSON$parse.email,password=_JSON$parse.password;if(email!=='admin@devias.io'||password!=='admin'){return[400,{message:'Please check your email and password'}];}var user=db.user;var accessToken=jwt.sign({id:user.id},JWT_SECRET,{expiresIn:JWT_EXPIRES_IN});return[200,{user:user,accessToken:accessToken}];});mock.onGet('/api/account/me').reply(function(config){var Authorization=config.headers.Authorization;if(!Authorization){return[401,{message:'Authorization token missing'}];}try{var accessToken=Authorization.split(' ')[1];var _jwt$verify=jwt.verify(accessToken,JWT_SECRET),id=_jwt$verify.id;if(id!==db.user.id){return[401,{message:'Invalid authorization token'}];}return[200,{user:db.user}];}catch(error){return[401,{message:'Invalid authorization token'}];}});mock.onPost('/api/account/profile').reply(function(request){var _JSON$parse2=JSON.parse(request.data),update=_JSON$parse2.update;_.assign(db.user,update);return[200,{user:db.user}];});mock.onGet('/api/account/settings').reply(200,{settings:{}});mock.onGet('/api/account/subscription').reply(200,{subscription:{name:'Freelancer',price:'5',currency:'$',proposalsLeft:12,templatesLeft:5,invitesLeft:24,adsLeft:10,hasAnalytics:true,hasEmailAlerts:true}});","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/mock/accountMock.js"],"names":["_","jwt","mock","JWT_SECRET","JWT_EXPIRES_IN","db","user","id","avatar","bio","canHire","country","email","username","password","firstName","isPublic","lastName","phone","role","state","timezone","onPost","reply","config","JSON","parse","data","message","accessToken","sign","expiresIn","onGet","Authorization","headers","split","verify","error","request","update","assign","settings","subscription","name","price","currency","proposalsLeft","templatesLeft","invitesLeft","adsLeft","hasAnalytics","hasEmailAlerts"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport mock from 'src/utils/mock';\n\nconst JWT_SECRET = 'devias-top-secret-key';\nconst JWT_EXPIRES_IN = '2 days';\n\nconst db = {\n  user: {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/images/avatars/avatar_6.png',\n    bio: 'Sales Manager',\n    canHire: false,\n    country: 'USA',\n    email: 'katarina.smith@devias.io',\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Katarina',\n    isPublic: true,\n    lastName: 'Smith',\n    phone: '+40 777666555',\n    role: 'admin',\n    state: 'New York',\n    timezone: '4:32PM (GMT-4)'\n  }\n};\n\nmock.onPost('/api/account/login').reply((config) => {\n  const { email, password } = JSON.parse(config.data);\n\n  if (email !== 'admin@devias.io' || password !== 'admin') {\n    return [400, { message: 'Please check your email and password' }];\n  }\n\n  const { user } = db;\n\n  const accessToken = jwt.sign(\n    { id: user.id },\n    JWT_SECRET,\n    { expiresIn: JWT_EXPIRES_IN }\n  );\n\n  return [200, { user, accessToken }];\n});\n\nmock.onGet('/api/account/me').reply((config) => {\n  const { Authorization } = config.headers;\n\n  if (!Authorization) {\n    return [401, { message: 'Authorization token missing' }];\n  }\n\n  try {\n    const accessToken = Authorization.split(' ')[1];\n\n    const { id } = jwt.verify(accessToken, JWT_SECRET);\n\n    if (id !== db.user.id) {\n      return [401, { message: 'Invalid authorization token' }];\n    }\n\n    return [200, { user: db.user }];\n  } catch (error) {\n    return [401, { message: 'Invalid authorization token' }];\n  }\n});\n\nmock.onPost('/api/account/profile').reply((request) => {\n  const { update } = JSON.parse(request.data);\n\n  _.assign(db.user, update);\n\n  return [200, { user: db.user }];\n});\n\nmock.onGet('/api/account/settings').reply(200, {\n  settings: {}\n});\n\nmock.onGet('/api/account/subscription').reply(200, {\n  subscription: {\n    name: 'Freelancer',\n    price: '5',\n    currency: '$',\n    proposalsLeft: 12,\n    templatesLeft: 5,\n    invitesLeft: 24,\n    adsLeft: 10,\n    hasAnalytics: true,\n    hasEmailAlerts: true\n  }\n});\n"]},"metadata":{},"sourceType":"module"}