{"ast":null,"code":"import _slicedToArray from\"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState,useEffect,useCallback}from'react';import clsx from'clsx';import moment from'moment';import PerfectScrollbar from'react-perfect-scrollbar';import{Box,Card,CardHeader,Divider,Typography,Table,TableBody,TableCell,TableRow,colors,makeStyles}from'@material-ui/core';import axios from'src/utils/axios';import useIsMountedRef from'src/hooks/useIsMountedRef';import Label from'src/components/Label';var useStyles=makeStyles(function(){return{root:{},methodCell:{width:100},statusCell:{width:64}};});function Logs(_ref){var className=_ref.className,rest=_objectWithoutProperties(_ref,[\"className\"]);var classes=useStyles();var isMountedRef=useIsMountedRef();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),logs=_useState2[0],setLogs=_useState2[1];var getLogs=useCallback(function(){axios.get('/api/management/customers/1/logs').then(function(response){if(isMountedRef.current){setLogs(response.data.logs);}});},[isMountedRef]);useEffect(function(){getLogs();},[getLogs]);if(!logs){return null;}return(/*#__PURE__*/React.createElement(\"div\",Object.assign({className:clsx(classes.root,className)},rest),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,{title:\"Customer logs\"}),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(Box,{minWidth:1150},/*#__PURE__*/React.createElement(Table,null,/*#__PURE__*/React.createElement(TableBody,null,logs.map(function(log){return(/*#__PURE__*/React.createElement(TableRow,{key:log.id},/*#__PURE__*/React.createElement(TableCell,{className:classes.methodCell},/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",color:\"textPrimary\"},log.method)),/*#__PURE__*/React.createElement(TableCell,{className:classes.statusCell},/*#__PURE__*/React.createElement(Label,{color:log.status===200?colors.green[600]:colors.red[600]},log.status)),/*#__PURE__*/React.createElement(TableCell,null,log.route),/*#__PURE__*/React.createElement(TableCell,null,log.desc),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},log.IP),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},moment(log.createdAt).format('YYYY/MM/DD | hh:mm:ss'))));}))))))));}export default Logs;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/management/CustomerDetailsView/Logs.js"],"names":["React","useState","useEffect","useCallback","clsx","moment","PerfectScrollbar","Box","Card","CardHeader","Divider","Typography","Table","TableBody","TableCell","TableRow","colors","makeStyles","axios","useIsMountedRef","Label","useStyles","root","methodCell","width","statusCell","Logs","className","rest","classes","isMountedRef","logs","setLogs","getLogs","get","then","response","current","data","map","log","id","method","status","green","red","route","desc","IP","createdAt","format"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Label from 'src/components/Label';\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  methodCell: {\n    width: 100\n  },\n  statusCell: {\n    width: 64\n  }\n}));\n\nfunction Logs({ className, ...rest }) {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [logs, setLogs] = useState(null);\n\n  const getLogs = useCallback(() => {\n    axios\n      .get('/api/management/customers/1/logs')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setLogs(response.data.logs);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getLogs();\n  }, [getLogs]);\n\n  if (!logs) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Card>\n        <CardHeader title=\"Customer logs\" />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={1150}>\n            <Table>\n              <TableBody>\n                {logs.map((log) => (\n                  <TableRow key={log.id}>\n                    <TableCell className={classes.methodCell}>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                      >\n                        {log.method}\n                      </Typography>\n                    </TableCell>\n                    <TableCell className={classes.statusCell}>\n                      <Label\n                        color={\n                          log.status === 200\n                            ? colors.green[600]\n                            : colors.red[600]\n                        }\n                      >\n                        {log.status}\n                      </Label>\n                    </TableCell>\n                    <TableCell>{log.route}</TableCell>\n                    <TableCell>{log.desc}</TableCell>\n                    <TableCell align=\"right\">{log.IP}</TableCell>\n                    <TableCell align=\"right\">\n                      {moment(log.createdAt).format('YYYY/MM/DD | hh:mm:ss')}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n      </Card>\n    </div>\n  );\n}\n\nLogs.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Logs;\n"]},"metadata":{},"sourceType":"module"}