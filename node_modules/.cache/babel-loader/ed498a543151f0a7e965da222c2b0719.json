{"ast":null,"code":"import _toConsumableArray from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/redhan/Desktop/work/Ecom-Admin/src/views/management/OrderListView/Results.js\";\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Box, Card, CardHeader, Checkbox, Divider, IconButton, SvgIcon, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography, makeStyles } from '@material-ui/core';\nimport { Edit as EditIcon, ArrowRight as ArrowRightIcon } from 'react-feather';\nimport Label from 'src/components/Label';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport BulkOperations from './BulkOperations';\n\nfunction applyPagination(orders, page, limit) {\n  return orders.slice(page * limit, page * limit + limit);\n}\n\nvar paymentStatusColors = {\n  canceled: 'error',\n  pending: 'warning',\n  completed: 'success',\n  rejected: 'error'\n};\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nfunction Results(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      orders = _ref.orders,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"orders\"]);\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedOrders = _useState2[0],\n      setSelectedOrders = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      page = _useState4[0],\n      setPage = _useState4[1];\n\n  var _useState5 = useState(10),\n      _useState6 = _slicedToArray(_useState5, 2),\n      limit = _useState6[0],\n      setLimit = _useState6[1];\n\n  var handleSelectAllOrders = function handleSelectAllOrders(event) {\n    setSelectedOrders(event.target.checked ? orders.map(function (order) {\n      return order.id;\n    }) : []);\n  };\n\n  var handleSelectOneOrder = function handleSelectOneOrder(event, orderId) {\n    if (!selectedOrders.includes(orderId)) {\n      setSelectedOrders(function (prevSelected) {\n        return [].concat(_toConsumableArray(prevSelected), [orderId]);\n      });\n    } else {\n      setSelectedOrders(function (prevSelected) {\n        return prevSelected.filter(function (id) {\n          return id !== orderId;\n        });\n      });\n    }\n  };\n\n  var handlePageChange = function handlePageChange(event, newPage) {\n    setPage(newPage);\n  };\n\n  var handleLimitChange = function handleLimitChange(event) {\n    setLimit(event.target.value);\n  };\n\n  var paginatedOrders = applyPagination(orders, page, limit);\n  var enableBulkOperations = selectedOrders.length > 0;\n  var selectedSomeOrders = selectedOrders.length > 0 && selectedOrders.length < orders.length;\n  var selectedAllOrders = selectedOrders.length === orders.length;\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", Object.assign({\n      className: clsx(classes.root, className)\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(Typography, {\n      color: \"textSecondary\",\n      gutterBottom: true,\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, orders.length, ' ', \"Records found. Page\", ' ', page + 1, ' ', \"of\", ' ', Math.ceil(orders.length / limit)),\n    /*#__PURE__*/\n    React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(CardHeader, {\n      action:\n      /*#__PURE__*/\n      React.createElement(GenericMoreButton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }\n      }),\n      title: \"Orders\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Box, {\n      minWidth: 1150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Checkbox, {\n      checked: selectedAllOrders,\n      indeterminate: selectedSomeOrders,\n      onChange: handleSelectAllOrders,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    })),\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 19\n      }\n    }, \"Ref\"),\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }, \"Customer\"),\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 19\n      }\n    }, \"Method\"),\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }\n    }, \"Total\"),\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }\n    }, \"Status\"),\n    /*#__PURE__*/\n    React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    }, \"Actions\"))),\n    /*#__PURE__*/\n    React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, paginatedOrders.map(function (order) {\n      var isOrderSelected = selectedOrders.includes(order.id);\n      return (\n        /*#__PURE__*/\n        React.createElement(TableRow, {\n          key: order.id,\n          selected: selectedOrders.indexOf(order.id) !== -1,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          padding: \"checkbox\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 23\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Checkbox, {\n          checked: isOrderSelected,\n          onChange: function onChange(event) {\n            return handleSelectOneOrder(event, order.id);\n          },\n          value: isOrderSelected,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }\n        })),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 23\n          }\n        }, order.payment.ref,\n        /*#__PURE__*/\n        React.createElement(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }\n        }, moment(order.createdAt).format('DD MMM YYYY | hh:mm'))),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 23\n          }\n        }, order.customer.name),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 23\n          }\n        }, order.payment.method),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 23\n          }\n        }, order.payment.currency, order.payment.total),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 23\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Label, {\n          color: paymentStatusColors[order.payment.status],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }\n        }, order.payment.status)),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          align: \"right\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 23\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(IconButton, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(SvgIcon, {\n          fontSize: \"small\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 27\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(EditIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }\n        }))),\n        /*#__PURE__*/\n        React.createElement(IconButton, {\n          component: RouterLink,\n          to: \"/app/management/orders/1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(SvgIcon, {\n          fontSize: \"small\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 27\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(ArrowRightIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }\n        })))))\n      );\n    }))))),\n    /*#__PURE__*/\n    React.createElement(TablePagination, {\n      component: \"div\",\n      count: orders.length,\n      onChangePage: handlePageChange,\n      onChangeRowsPerPage: handleLimitChange,\n      page: page,\n      rowsPerPage: limit,\n      rowsPerPageOptions: [5, 10, 25],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    })),\n    /*#__PURE__*/\n    React.createElement(BulkOperations, {\n      open: enableBulkOperations,\n      selected: selectedOrders,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }\n    }))\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array\n};\nResults.defaultProps = {\n  orders: []\n};\nexport default Results;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/management/OrderListView/Results.js"],"names":["React","useState","Link","RouterLink","clsx","moment","PropTypes","PerfectScrollbar","Box","Card","CardHeader","Checkbox","Divider","IconButton","SvgIcon","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","makeStyles","Edit","EditIcon","ArrowRight","ArrowRightIcon","Label","GenericMoreButton","BulkOperations","applyPagination","orders","page","limit","slice","paymentStatusColors","canceled","pending","completed","rejected","useStyles","root","Results","className","rest","classes","selectedOrders","setSelectedOrders","setPage","setLimit","handleSelectAllOrders","event","target","checked","map","order","id","handleSelectOneOrder","orderId","includes","prevSelected","filter","handlePageChange","newPage","handleLimitChange","value","paginatedOrders","enableBulkOperations","length","selectedSomeOrders","selectedAllOrders","Math","ceil","isOrderSelected","indexOf","payment","ref","createdAt","format","customer","name","method","currency","total","status","propTypes","string","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Checkbox,\n  Divider,\n  IconButton,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon\n} from 'react-feather';\nimport Label from 'src/components/Label';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport BulkOperations from './BulkOperations';\n\nfunction applyPagination(orders, page, limit) {\n  return orders.slice(page * limit, page * limit + limit);\n}\n\nconst paymentStatusColors = {\n  canceled: 'error',\n  pending: 'warning',\n  completed: 'success',\n  rejected: 'error'\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Results({ className, orders, ...rest }) {\n  const classes = useStyles();\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n\n  const handleSelectAllOrders = (event) => {\n    setSelectedOrders(event.target.checked\n      ? orders.map((order) => order.id)\n      : []);\n  };\n\n  const handleSelectOneOrder = (event, orderId) => {\n    if (!selectedOrders.includes(orderId)) {\n      setSelectedOrders((prevSelected) => [...prevSelected, orderId]);\n    } else {\n      setSelectedOrders((prevSelected) => prevSelected.filter((id) => id !== orderId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const paginatedOrders = applyPagination(orders, page, limit);\n  const enableBulkOperations = selectedOrders.length > 0;\n  const selectedSomeOrders = selectedOrders.length > 0 && selectedOrders.length < orders.length;\n  const selectedAllOrders = selectedOrders.length === orders.length;\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length}\n        {' '}\n        Records found. Page\n        {' '}\n        {page + 1}\n        {' '}\n        of\n        {' '}\n        {Math.ceil(orders.length / limit)}\n      </Typography>\n      <Card>\n        <CardHeader\n          action={<GenericMoreButton />}\n          title=\"Orders\"\n        />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={1150}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedAllOrders}\n                      indeterminate={selectedSomeOrders}\n                      onChange={handleSelectAllOrders}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    Ref\n                  </TableCell>\n                  <TableCell>\n                    Customer\n                  </TableCell>\n                  <TableCell>\n                    Method\n                  </TableCell>\n                  <TableCell>\n                    Total\n                  </TableCell>\n                  <TableCell>\n                    Status\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    Actions\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {paginatedOrders.map((order) => {\n                  const isOrderSelected = selectedOrders.includes(order.id);\n\n                  return (\n                    <TableRow\n                      key={order.id}\n                      selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isOrderSelected}\n                          onChange={(event) => handleSelectOneOrder(event, order.id)}\n                          value={isOrderSelected}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {order.payment.ref}\n                        <Typography\n                          variant=\"body2\"\n                          color=\"textSecondary\"\n                        >\n                          {moment(order.createdAt).format(\n                            'DD MMM YYYY | hh:mm'\n                          )}\n                        </Typography>\n                      </TableCell>\n\n                      <TableCell>{order.customer.name}</TableCell>\n                      <TableCell>{order.payment.method}</TableCell>\n                      <TableCell>\n                        {order.payment.currency}\n                        {order.payment.total}\n                      </TableCell>\n                      <TableCell>\n                        <Label color={paymentStatusColors[order.payment.status]}>\n                          {order.payment.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton>\n                          <SvgIcon fontSize=\"small\">\n                            <EditIcon />\n                          </SvgIcon>\n                        </IconButton>\n                        <IconButton\n                          component={RouterLink}\n                          to=\"/app/management/orders/1\"\n                        >\n                          <SvgIcon fontSize=\"small\">\n                            <ArrowRightIcon />\n                          </SvgIcon>\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n        <TablePagination\n          component=\"div\"\n          count={orders.length}\n          onChangePage={handlePageChange}\n          onChangeRowsPerPage={handleLimitChange}\n          page={page}\n          rowsPerPage={limit}\n          rowsPerPageOptions={[5, 10, 25]}\n        />\n      </Card>\n      <BulkOperations\n        open={enableBulkOperations}\n        selected={selectedOrders}\n      />\n    </div>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}