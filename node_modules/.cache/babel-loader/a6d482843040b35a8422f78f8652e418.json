{"ast":null,"code":"import _regeneratorRuntime from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/redhan/Desktop/work/Ecom-Admin/src/views/auth/LoginView/LoginForm.js\";\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { Box, Button, TextField, FormHelperText, makeStyles } from '@material-ui/core';\nimport { login } from 'src/actions/accountActions';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nfunction LoginForm(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      onSubmitSuccess = _ref.onSubmitSuccess,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"onSubmitSuccess\"]);\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  return (\n    /*#__PURE__*/\n    React.createElement(Formik, {\n      initialValues: {\n        email: 'admin@devias.io',\n        password: 'admin'\n      },\n      validationSchema: Yup.object().shape({\n        email: Yup.string().email('Must be a valid email').max(100).required('Email is required'),\n        password: Yup.string().max(100).required('Password is required')\n      }),\n      onSubmit:\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var setErrors, setStatus, setSubmitting, message;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors, setStatus = _ref2.setStatus, setSubmitting = _ref2.setSubmitting;\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return dispatch(login(values.email, values.password));\n\n                case 4:\n                  onSubmitSuccess();\n                  _context.next = 13;\n                  break;\n\n                case 7:\n                  _context.prev = 7;\n                  _context.t0 = _context[\"catch\"](1);\n                  message = _context.t0.response && _context.t0.response.data.message || 'Something went wrong';\n                  setStatus({\n                    success: false\n                  });\n                  setErrors({\n                    submit: message\n                  });\n                  setSubmitting(false);\n\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[1, 7]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }, function (_ref4) {\n      var errors = _ref4.errors,\n          handleBlur = _ref4.handleBlur,\n          handleChange = _ref4.handleChange,\n          handleSubmit = _ref4.handleSubmit,\n          isSubmitting = _ref4.isSubmitting,\n          touched = _ref4.touched,\n          values = _ref4.values;\n      return (\n        /*#__PURE__*/\n        React.createElement(\"form\", Object.assign({\n          noValidate: true,\n          className: clsx(classes.root, className),\n          onSubmit: handleSubmit\n        }, rest, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 9\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(TextField, {\n          error: Boolean(touched.email && errors.email),\n          fullWidth: true,\n          autoFocus: true,\n          helperText: touched.email && errors.email,\n          label: \"Email Address\",\n          margin: \"normal\",\n          name: \"email\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"email\",\n          value: values.email,\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(TextField, {\n          error: Boolean(touched.password && errors.password),\n          fullWidth: true,\n          helperText: touched.password && errors.password,\n          label: \"Password\",\n          margin: \"normal\",\n          name: \"password\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"password\",\n          value: values.password,\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(Box, {\n          mt: 2,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Button, {\n          color: \"secondary\",\n          disabled: isSubmitting,\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }\n        }, \"Log In\"), errors.submit &&\n        /*#__PURE__*/\n        React.createElement(Box, {\n          mt: 3,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(FormHelperText, {\n          error: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }\n        }, errors.submit))))\n      );\n    })\n  );\n}\n\nLoginForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\nLoginForm.defaultProps = {\n  onSubmitSuccess: function onSubmitSuccess() {}\n};\nexport default LoginForm;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/auth/LoginView/LoginForm.js"],"names":["React","useDispatch","clsx","Yup","PropTypes","Formik","Box","Button","TextField","FormHelperText","makeStyles","login","useStyles","root","LoginForm","className","onSubmitSuccess","rest","classes","dispatch","email","password","object","shape","string","max","required","values","setErrors","setStatus","setSubmitting","message","response","data","success","submit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  TextField,\n  FormHelperText,\n  makeStyles\n} from '@material-ui/core';\nimport { login } from 'src/actions/accountActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction LoginForm({ className, onSubmitSuccess, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        email: 'admin@devias.io',\n        password: 'admin'\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Must be a valid email').max(100).required('Email is required'),\n        password: Yup.string().max(100).required('Password is required')\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await dispatch(login(values.email, values.password));\n          onSubmitSuccess();\n        } catch (error) {\n          const message = (error.response && error.response.data.message) || 'Something went wrong';\n\n          setStatus({ success: false });\n          setErrors({ submit: message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          noValidate\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            autoFocus\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Log In\n            </Button>\n            {errors.submit && (\n              <Box mt={3}>\n                <FormHelperText error>\n                  {errors.submit}\n                </FormHelperText>\n              </Box>\n            )}\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nLoginForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\n\nLoginForm.defaultProps = {\n  onSubmitSuccess: () => {}\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}