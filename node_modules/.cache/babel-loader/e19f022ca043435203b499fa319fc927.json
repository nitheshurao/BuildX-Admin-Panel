{"ast":null,"code":"import _toConsumableArray from\"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from'react';import{Link as RouterLink}from'react-router-dom';import clsx from'clsx';import moment from'moment';import PerfectScrollbar from'react-perfect-scrollbar';import{Box,Card,CardHeader,Checkbox,Divider,IconButton,SvgIcon,Table,TableBody,TableCell,TableHead,TablePagination,TableRow,Typography,makeStyles}from'@material-ui/core';import{Edit as EditIcon,ArrowRight as ArrowRightIcon}from'react-feather';import Label from'src/components/Label';import GenericMoreButton from'src/components/GenericMoreButton';import BulkOperations from'./BulkOperations';function applyPagination(orders,page,limit){return orders.slice(page*limit,page*limit+limit);}var paymentStatusColors={canceled:'error',pending:'warning',completed:'success',rejected:'error'};var useStyles=makeStyles(function(){return{root:{}};});function Results(_ref){var className=_ref.className,orders=_ref.orders,rest=_objectWithoutProperties(_ref,[\"className\",\"orders\"]);var classes=useStyles();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedOrders=_useState2[0],setSelectedOrders=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),page=_useState4[0],setPage=_useState4[1];var _useState5=useState(10),_useState6=_slicedToArray(_useState5,2),limit=_useState6[0],setLimit=_useState6[1];var handleSelectAllOrders=function handleSelectAllOrders(event){setSelectedOrders(event.target.checked?orders.map(function(order){return order.id;}):[]);};var handleSelectOneOrder=function handleSelectOneOrder(event,orderId){if(!selectedOrders.includes(orderId)){setSelectedOrders(function(prevSelected){return[].concat(_toConsumableArray(prevSelected),[orderId]);});}else{setSelectedOrders(function(prevSelected){return prevSelected.filter(function(id){return id!==orderId;});});}};var handlePageChange=function handlePageChange(event,newPage){setPage(newPage);};var handleLimitChange=function handleLimitChange(event){setLimit(event.target.value);};var paginatedOrders=applyPagination(orders,page,limit);var enableBulkOperations=selectedOrders.length>0;var selectedSomeOrders=selectedOrders.length>0&&selectedOrders.length<orders.length;var selectedAllOrders=selectedOrders.length===orders.length;return(/*#__PURE__*/React.createElement(\"div\",Object.assign({className:clsx(classes.root,className)},rest),/*#__PURE__*/React.createElement(Typography,{color:\"textSecondary\",gutterBottom:true,variant:\"body2\"},orders.length,' ',\"Records found. Page\",' ',page+1,' ',\"of\",' ',Math.ceil(orders.length/limit)),/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,{action:/*#__PURE__*/React.createElement(GenericMoreButton,null),title:\"Orders\"}),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(Box,{minWidth:1150},/*#__PURE__*/React.createElement(Table,null,/*#__PURE__*/React.createElement(TableHead,null,/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,{padding:\"checkbox\"},/*#__PURE__*/React.createElement(Checkbox,{checked:selectedAllOrders,indeterminate:selectedSomeOrders,onChange:handleSelectAllOrders})),/*#__PURE__*/React.createElement(TableCell,null,\"Ref\"),/*#__PURE__*/React.createElement(TableCell,null,\"Customer\"),/*#__PURE__*/React.createElement(TableCell,null,\"Method\"),/*#__PURE__*/React.createElement(TableCell,null,\"Total\"),/*#__PURE__*/React.createElement(TableCell,null,\"Status\"),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},\"Actions\"))),/*#__PURE__*/React.createElement(TableBody,null,paginatedOrders.map(function(order){var isOrderSelected=selectedOrders.includes(order.id);return(/*#__PURE__*/React.createElement(TableRow,{key:order.id,selected:selectedOrders.indexOf(order.id)!==-1},/*#__PURE__*/React.createElement(TableCell,{padding:\"checkbox\"},/*#__PURE__*/React.createElement(Checkbox,{checked:isOrderSelected,onChange:function onChange(event){return handleSelectOneOrder(event,order.id);},value:isOrderSelected})),/*#__PURE__*/React.createElement(TableCell,null,order.payment.ref,/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",color:\"textSecondary\"},moment(order.createdAt).format('DD MMM YYYY | hh:mm'))),/*#__PURE__*/React.createElement(TableCell,null,order.customer.name),/*#__PURE__*/React.createElement(TableCell,null,order.payment.method),/*#__PURE__*/React.createElement(TableCell,null,order.payment.currency,order.payment.total),/*#__PURE__*/React.createElement(TableCell,null,/*#__PURE__*/React.createElement(Label,{color:paymentStatusColors[order.payment.status]},order.payment.status)),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},/*#__PURE__*/React.createElement(IconButton,null,/*#__PURE__*/React.createElement(SvgIcon,{fontSize:\"small\"},/*#__PURE__*/React.createElement(EditIcon,null))),/*#__PURE__*/React.createElement(IconButton,{component:RouterLink,to:\"/app/management/orders/1\"},/*#__PURE__*/React.createElement(SvgIcon,{fontSize:\"small\"},/*#__PURE__*/React.createElement(ArrowRightIcon,null))))));}))))),/*#__PURE__*/React.createElement(TablePagination,{component:\"div\",count:orders.length,onChangePage:handlePageChange,onChangeRowsPerPage:handleLimitChange,page:page,rowsPerPage:limit,rowsPerPageOptions:[5,10,25]})),/*#__PURE__*/React.createElement(BulkOperations,{open:enableBulkOperations,selected:selectedOrders})));}Results.defaultProps={orders:[]};export default Results;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/management/OrderListView/Results.js"],"names":["React","useState","Link","RouterLink","clsx","moment","PerfectScrollbar","Box","Card","CardHeader","Checkbox","Divider","IconButton","SvgIcon","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","makeStyles","Edit","EditIcon","ArrowRight","ArrowRightIcon","Label","GenericMoreButton","BulkOperations","applyPagination","orders","page","limit","slice","paymentStatusColors","canceled","pending","completed","rejected","useStyles","root","Results","className","rest","classes","selectedOrders","setSelectedOrders","setPage","setLimit","handleSelectAllOrders","event","target","checked","map","order","id","handleSelectOneOrder","orderId","includes","prevSelected","filter","handlePageChange","newPage","handleLimitChange","value","paginatedOrders","enableBulkOperations","length","selectedSomeOrders","selectedAllOrders","Math","ceil","isOrderSelected","indexOf","payment","ref","createdAt","format","customer","name","method","currency","total","status","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Checkbox,\n  Divider,\n  IconButton,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  Edit as EditIcon,\n  ArrowRight as ArrowRightIcon\n} from 'react-feather';\nimport Label from 'src/components/Label';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport BulkOperations from './BulkOperations';\n\nfunction applyPagination(orders, page, limit) {\n  return orders.slice(page * limit, page * limit + limit);\n}\n\nconst paymentStatusColors = {\n  canceled: 'error',\n  pending: 'warning',\n  completed: 'success',\n  rejected: 'error'\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction Results({ className, orders, ...rest }) {\n  const classes = useStyles();\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10);\n\n  const handleSelectAllOrders = (event) => {\n    setSelectedOrders(event.target.checked\n      ? orders.map((order) => order.id)\n      : []);\n  };\n\n  const handleSelectOneOrder = (event, orderId) => {\n    if (!selectedOrders.includes(orderId)) {\n      setSelectedOrders((prevSelected) => [...prevSelected, orderId]);\n    } else {\n      setSelectedOrders((prevSelected) => prevSelected.filter((id) => id !== orderId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const paginatedOrders = applyPagination(orders, page, limit);\n  const enableBulkOperations = selectedOrders.length > 0;\n  const selectedSomeOrders = selectedOrders.length > 0 && selectedOrders.length < orders.length;\n  const selectedAllOrders = selectedOrders.length === orders.length;\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length}\n        {' '}\n        Records found. Page\n        {' '}\n        {page + 1}\n        {' '}\n        of\n        {' '}\n        {Math.ceil(orders.length / limit)}\n      </Typography>\n      <Card>\n        <CardHeader\n          action={<GenericMoreButton />}\n          title=\"Orders\"\n        />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={1150}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedAllOrders}\n                      indeterminate={selectedSomeOrders}\n                      onChange={handleSelectAllOrders}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    Ref\n                  </TableCell>\n                  <TableCell>\n                    Customer\n                  </TableCell>\n                  <TableCell>\n                    Method\n                  </TableCell>\n                  <TableCell>\n                    Total\n                  </TableCell>\n                  <TableCell>\n                    Status\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    Actions\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {paginatedOrders.map((order) => {\n                  const isOrderSelected = selectedOrders.includes(order.id);\n\n                  return (\n                    <TableRow\n                      key={order.id}\n                      selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isOrderSelected}\n                          onChange={(event) => handleSelectOneOrder(event, order.id)}\n                          value={isOrderSelected}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {order.payment.ref}\n                        <Typography\n                          variant=\"body2\"\n                          color=\"textSecondary\"\n                        >\n                          {moment(order.createdAt).format(\n                            'DD MMM YYYY | hh:mm'\n                          )}\n                        </Typography>\n                      </TableCell>\n\n                      <TableCell>{order.customer.name}</TableCell>\n                      <TableCell>{order.payment.method}</TableCell>\n                      <TableCell>\n                        {order.payment.currency}\n                        {order.payment.total}\n                      </TableCell>\n                      <TableCell>\n                        <Label color={paymentStatusColors[order.payment.status]}>\n                          {order.payment.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton>\n                          <SvgIcon fontSize=\"small\">\n                            <EditIcon />\n                          </SvgIcon>\n                        </IconButton>\n                        <IconButton\n                          component={RouterLink}\n                          to=\"/app/management/orders/1\"\n                        >\n                          <SvgIcon fontSize=\"small\">\n                            <ArrowRightIcon />\n                          </SvgIcon>\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n        <TablePagination\n          component=\"div\"\n          count={orders.length}\n          onChangePage={handlePageChange}\n          onChangeRowsPerPage={handleLimitChange}\n          page={page}\n          rowsPerPage={limit}\n          rowsPerPageOptions={[5, 10, 25]}\n        />\n      </Card>\n      <BulkOperations\n        open={enableBulkOperations}\n        selected={selectedOrders}\n      />\n    </div>\n  );\n}\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}