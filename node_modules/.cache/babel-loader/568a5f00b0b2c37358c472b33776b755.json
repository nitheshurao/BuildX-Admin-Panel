{"ast":null,"code":"import _slicedToArray from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/redhan/Desktop/work/Ecom-Admin/src/views/management/CustomerDetailsView/Logs.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Box, Card, CardHeader, Divider, Typography, Table, TableBody, TableCell, TableRow, colors, makeStyles } from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Label from 'src/components/Label';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {},\n    methodCell: {\n      width: 100\n    },\n    statusCell: {\n      width: 64\n    }\n  };\n});\n\nfunction Logs(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  var classes = useStyles();\n  var isMountedRef = useIsMountedRef();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      logs = _useState2[0],\n      setLogs = _useState2[1];\n\n  var getLogs = useCallback(function () {\n    axios.get('/api/management/customers/1/logs').then(function (response) {\n      if (isMountedRef.current) {\n        setLogs(response.data.logs);\n      }\n    });\n  }, [isMountedRef]);\n  useEffect(function () {\n    getLogs();\n  }, [getLogs]);\n\n  if (!logs) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", Object.assign({\n      className: clsx(classes.root, className)\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(CardHeader, {\n      title: \"Customer logs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }),\n    /*#__PURE__*/\n    React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Box, {\n      minWidth: 1150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, logs.map(function (log) {\n      return (\n        /*#__PURE__*/\n        React.createElement(TableRow, {\n          key: log.id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          className: classes.methodCell,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Typography, {\n          variant: \"h6\",\n          color: \"textPrimary\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 23\n          }\n        }, log.method)),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          className: classes.statusCell,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Label, {\n          color: log.status === 200 ? colors.green[600] : colors.red[600],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 23\n          }\n        }, log.status)),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }\n        }, log.route),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }\n        }, log.desc),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          align: \"right\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }\n        }, log.IP),\n        /*#__PURE__*/\n        React.createElement(TableCell, {\n          align: \"right\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }\n        }, moment(log.createdAt).format('YYYY/MM/DD | hh:mm:ss')))\n      );\n    })))))))\n  );\n}\n\nLogs.propTypes = {\n  className: PropTypes.string\n};\nexport default Logs;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/management/CustomerDetailsView/Logs.js"],"names":["React","useState","useEffect","useCallback","PropTypes","clsx","moment","PerfectScrollbar","Box","Card","CardHeader","Divider","Typography","Table","TableBody","TableCell","TableRow","colors","makeStyles","axios","useIsMountedRef","Label","useStyles","root","methodCell","width","statusCell","Logs","className","rest","classes","isMountedRef","logs","setLogs","getLogs","get","then","response","current","data","map","log","id","method","status","green","red","route","desc","IP","createdAt","format","propTypes","string"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,OAJP;AAKA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,KANF,EAOEC,SAPF,EAQEC,SARF,EASEC,QATF,EAUEC,MAVF,EAWEC,UAXF,QAYO,mBAZP;AAaA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AAEA,IAAMC,SAAS,GAAGJ,UAAU,CAAC;AAAA,SAAO;AAClCK,IAAAA,IAAI,EAAE,EAD4B;AAElCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,KAAK,EAAE;AADG,KAFsB;AAKlCC,IAAAA,UAAU,EAAE;AACVD,MAAAA,KAAK,EAAE;AADG;AALsB,GAAP;AAAA,CAAD,CAA5B;;AAUA,SAASE,IAAT,OAAsC;AAAA;;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,MAARC,IAAQ;;AACpC,MAAMC,OAAO,GAAGR,SAAS,EAAzB;AACA,MAAMS,YAAY,GAAGX,eAAe,EAApC;;AAFoC,kBAGZnB,QAAQ,CAAC,IAAD,CAHI;AAAA;AAAA,MAG7B+B,IAH6B;AAAA,MAGvBC,OAHuB;;AAKpC,MAAMC,OAAO,GAAG/B,WAAW,CAAC,YAAM;AAChCgB,IAAAA,KAAK,CACFgB,GADH,CACO,kCADP,EAEGC,IAFH,CAEQ,UAACC,QAAD,EAAc;AAClB,UAAIN,YAAY,CAACO,OAAjB,EAA0B;AACxBL,QAAAA,OAAO,CAACI,QAAQ,CAACE,IAAT,CAAcP,IAAf,CAAP;AACD;AACF,KANH;AAOD,GAR0B,EAQxB,CAACD,YAAD,CARwB,CAA3B;AAUA7B,EAAAA,SAAS,CAAC,YAAM;AACdgC,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAI,CAACF,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED;AAAA;AACE;AACE,MAAA,SAAS,EAAE3B,IAAI,CAACyB,OAAO,CAACP,IAAT,EAAeK,SAAf;AADjB,OAEMC,IAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIE,wBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,wBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAAA;AAEE,wBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF;AAAA;AAGE,wBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,wBAAC,GAAD;AAAK,MAAA,QAAQ,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,wBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,wBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,IAAI,CAACQ,GAAL,CAAS,UAACC,GAAD;AAAA;AAAA;AACR,4BAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,GAAG,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,4BAAC,SAAD;AAAW,UAAA,SAAS,EAAEZ,OAAO,CAACN,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,4BAAC,UAAD;AACE,UAAA,OAAO,EAAC,IADV;AAEE,UAAA,KAAK,EAAC,aAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIGiB,GAAG,CAACE,MAJP,CADF,CADF;AAAA;AASE,4BAAC,SAAD;AAAW,UAAA,SAAS,EAAEb,OAAO,CAACJ,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,4BAAC,KAAD;AACE,UAAA,KAAK,EACHe,GAAG,CAACG,MAAJ,KAAe,GAAf,GACI3B,MAAM,CAAC4B,KAAP,CAAa,GAAb,CADJ,GAEI5B,MAAM,CAAC6B,GAAP,CAAW,GAAX,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOGL,GAAG,CAACG,MAPP,CADF,CATF;AAAA;AAoBE,4BAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAYH,GAAG,CAACM,KAAhB,CApBF;AAAA;AAqBE,4BAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAYN,GAAG,CAACO,IAAhB,CArBF;AAAA;AAsBE,4BAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BP,GAAG,CAACQ,EAA9B,CAtBF;AAAA;AAuBE,4BAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG3C,MAAM,CAACmC,GAAG,CAACS,SAAL,CAAN,CAAsBC,MAAtB,CAA6B,uBAA7B,CADH,CAvBF;AADQ;AAAA,KAAT,CADH,CADF,CADF,CADF,CAHF,CAJF;AADF;AAgDD;;AAEDxB,IAAI,CAACyB,SAAL,GAAiB;AACfxB,EAAAA,SAAS,EAAExB,SAAS,CAACiD;AADN,CAAjB;AAIA,eAAe1B,IAAf","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  colors,\n  makeStyles\n} from '@material-ui/core';\nimport axios from 'src/utils/axios';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport Label from 'src/components/Label';\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  methodCell: {\n    width: 100\n  },\n  statusCell: {\n    width: 64\n  }\n}));\n\nfunction Logs({ className, ...rest }) {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [logs, setLogs] = useState(null);\n\n  const getLogs = useCallback(() => {\n    axios\n      .get('/api/management/customers/1/logs')\n      .then((response) => {\n        if (isMountedRef.current) {\n          setLogs(response.data.logs);\n        }\n      });\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getLogs();\n  }, [getLogs]);\n\n  if (!logs) {\n    return null;\n  }\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Card>\n        <CardHeader title=\"Customer logs\" />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={1150}>\n            <Table>\n              <TableBody>\n                {logs.map((log) => (\n                  <TableRow key={log.id}>\n                    <TableCell className={classes.methodCell}>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                      >\n                        {log.method}\n                      </Typography>\n                    </TableCell>\n                    <TableCell className={classes.statusCell}>\n                      <Label\n                        color={\n                          log.status === 200\n                            ? colors.green[600]\n                            : colors.red[600]\n                        }\n                      >\n                        {log.status}\n                      </Label>\n                    </TableCell>\n                    <TableCell>{log.route}</TableCell>\n                    <TableCell>{log.desc}</TableCell>\n                    <TableCell align=\"right\">{log.IP}</TableCell>\n                    <TableCell align=\"right\">\n                      {moment(log.createdAt).format('YYYY/MM/DD | hh:mm:ss')}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n      </Card>\n    </div>\n  );\n}\n\nLogs.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Logs;\n"]},"metadata":{},"sourceType":"module"}