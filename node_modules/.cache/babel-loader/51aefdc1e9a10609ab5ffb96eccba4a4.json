{"ast":null,"code":"/* eslint-disable import/prefer-default-export */import{applyMiddleware,createStore,compose}from'redux';import thunkMiddleware from'redux-thunk';import{composeWithDevTools}from'redux-devtools-extension';import{createLogger}from'redux-logger';import rootReducer from'src/reducers';import{ENABLE_REDUX_LOGGER}from'src/config';var loggerMiddleware=createLogger();export function configureStore(){var preloadedState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var middlewares=[thunkMiddleware];if(ENABLE_REDUX_LOGGER){middlewares.push(loggerMiddleware);}var middlewareEnhancer=composeWithDevTools(applyMiddleware.apply(void 0,middlewares));var enhancers=[middlewareEnhancer];var composedEnhancers=compose.apply(void 0,enhancers);var store=createStore(rootReducer,preloadedState,composedEnhancers);return store;}","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/store/index.js"],"names":["applyMiddleware","createStore","compose","thunkMiddleware","composeWithDevTools","createLogger","rootReducer","ENABLE_REDUX_LOGGER","loggerMiddleware","configureStore","preloadedState","middlewares","push","middlewareEnhancer","enhancers","composedEnhancers","store"],"mappings":"AAAA,iDACA,OAASA,eAAT,CAA0BC,WAA1B,CAAuCC,OAAvC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,eAAP,KAA4B,aAA5B,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,OAASC,YAAT,KAA6B,cAA7B,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,OAASC,mBAAT,KAAoC,YAApC,CAEA,GAAMC,CAAAA,gBAAgB,CAAGH,YAAY,EAArC,CAEA,MAAO,SAASI,CAAAA,cAAT,EAA6C,IAArBC,CAAAA,cAAqB,2DAAJ,EAAI,CAClD,GAAMC,CAAAA,WAAW,CAAG,CAACR,eAAD,CAApB,CAEA,GAAII,mBAAJ,CAAyB,CACvBI,WAAW,CAACC,IAAZ,CAAiBJ,gBAAjB,EACD,CAED,GAAMK,CAAAA,kBAAkB,CAAGT,mBAAmB,CAC5CJ,eAAe,MAAf,QAAmBW,WAAnB,CAD4C,CAA9C,CAIA,GAAMG,CAAAA,SAAS,CAAG,CAACD,kBAAD,CAAlB,CACA,GAAME,CAAAA,iBAAiB,CAAGb,OAAO,MAAP,QAAWY,SAAX,CAA1B,CAEA,GAAME,CAAAA,KAAK,CAAGf,WAAW,CAACK,WAAD,CAAcI,cAAd,CAA8BK,iBAA9B,CAAzB,CAEA,MAAOC,CAAAA,KAAP,CACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from 'src/reducers';\nimport { ENABLE_REDUX_LOGGER } from 'src/config';\n\nconst loggerMiddleware = createLogger();\n\nexport function configureStore(preloadedState = {}) {\n  const middlewares = [thunkMiddleware];\n\n  if (ENABLE_REDUX_LOGGER) {\n    middlewares.push(loggerMiddleware);\n  }\n\n  const middlewareEnhancer = composeWithDevTools(\n    applyMiddleware(...middlewares)\n  );\n\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = compose(...enhancers);\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}