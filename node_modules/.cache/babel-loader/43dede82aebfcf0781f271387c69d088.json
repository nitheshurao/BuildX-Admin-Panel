{"ast":null,"code":"import _regeneratorRuntime from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/redhan/Desktop/work/Ecom-Admin/src/views/auth/RegisterView/RegisterForm.js\";\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { Box, Button, Checkbox, FormHelperText, TextField, Typography, Link, makeStyles } from '@material-ui/core';\nimport { register } from 'src/actions/accountActions';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {}\n  };\n});\n\nfunction RegisterForm(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      onSubmitSuccess = _ref.onSubmitSuccess,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"onSubmitSuccess\"]);\n\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  return (\n    /*#__PURE__*/\n    React.createElement(Formik, {\n      initialValues: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '' // policy: false\n\n      },\n      validationSchema: Yup.object().shape({\n        firstName: Yup.string().max(255).required('First name is required'),\n        lastName: Yup.string().max(255).required('Last name is required'),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().min(7).max(255).required('Password is required') // policy: Yup.boolean().oneOf([true], 'This field must be checked')\n\n      }),\n      onSubmit:\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var setErrors, setStatus, setSubmitting;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors, setStatus = _ref2.setStatus, setSubmitting = _ref2.setSubmitting;\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return dispatch(register(values));\n\n                case 4:\n                  onSubmitSuccess();\n                  _context.next = 12;\n                  break;\n\n                case 7:\n                  _context.prev = 7;\n                  _context.t0 = _context[\"catch\"](1);\n                  setStatus({\n                    success: false\n                  });\n                  setErrors({\n                    submit: _context.t0.message\n                  });\n                  setSubmitting(false);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[1, 7]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }\n    }, function (_ref4) {\n      var errors = _ref4.errors,\n          handleBlur = _ref4.handleBlur,\n          handleChange = _ref4.handleChange,\n          handleSubmit = _ref4.handleSubmit,\n          isSubmitting = _ref4.isSubmitting,\n          touched = _ref4.touched,\n          values = _ref4.values;\n      return (\n        /*#__PURE__*/\n        React.createElement(\"form\", Object.assign({\n          className: clsx(classes.root, className),\n          onSubmit: handleSubmit\n        }, rest, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(TextField, {\n          error: Boolean(touched.firstName && errors.firstName),\n          fullWidth: true,\n          helperText: touched.firstName && errors.firstName,\n          label: \"First Name\",\n          margin: \"normal\",\n          name: \"firstName\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"firstName\",\n          value: values.firstName,\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(TextField, {\n          error: Boolean(touched.lastName && errors.lastName),\n          fullWidth: true,\n          helperText: touched.lastName && errors.lastName,\n          label: \"Last Name\",\n          margin: \"normal\",\n          name: \"lastName\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"lastName\",\n          value: values.lastName,\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(TextField, {\n          error: Boolean(touched.email && errors.email),\n          fullWidth: true,\n          helperText: touched.email && errors.email,\n          label: \"Email Address\",\n          margin: \"normal\",\n          name: \"email\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"email\",\n          value: values.email,\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(TextField, {\n          error: Boolean(touched.password && errors.password),\n          fullWidth: true,\n          helperText: touched.password && errors.password,\n          label: \"Password\",\n          margin: \"normal\",\n          name: \"password\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"password\",\n          value: values.password,\n          variant: \"outlined\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(Box, {\n          mt: 2,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 11\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(Button, {\n          color: \"secondary\",\n          disabled: isSubmitting,\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }\n        }, \"Create account\")))\n      );\n    })\n  );\n}\n\nRegisterForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\nRegisterForm.default = {\n  onSubmitSuccess: function onSubmitSuccess() {}\n};\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/auth/RegisterView/RegisterForm.js"],"names":["React","useDispatch","clsx","Yup","PropTypes","Formik","Box","Button","Checkbox","FormHelperText","TextField","Typography","Link","makeStyles","register","useStyles","root","RegisterForm","className","onSubmitSuccess","rest","classes","dispatch","firstName","lastName","email","password","object","shape","string","max","required","min","values","setErrors","setStatus","setSubmitting","success","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes","func","default"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormHelperText,\n  TextField,\n  Typography,\n  Link,\n  makeStyles\n} from '@material-ui/core';\nimport { register } from 'src/actions/accountActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction RegisterForm({ className, onSubmitSuccess, ...rest }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        // policy: false\n      }}\n      validationSchema={Yup.object().shape({\n        firstName: Yup.string().max(255).required('First name is required'),\n        lastName: Yup.string().max(255).required('Last name is required'),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().min(7).max(255).required('Password is required'),\n        // policy: Yup.boolean().oneOf([true], 'This field must be checked')\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await dispatch(register(values));\n          onSubmitSuccess();\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n          <TextField\n            error={Boolean(touched.firstName && errors.firstName)}\n            fullWidth\n            helperText={touched.firstName && errors.firstName}\n            label=\"First Name\"\n            margin=\"normal\"\n            name=\"firstName\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"firstName\"\n            value={values.firstName}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.lastName && errors.lastName)}\n            fullWidth\n            helperText={touched.lastName && errors.lastName}\n            label=\"Last Name\"\n            margin=\"normal\"\n            name=\"lastName\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"lastName\"\n            value={values.lastName}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          {/* <Box\n            alignItems=\"center\"\n            display=\"flex\"\n            mt={2}\n            ml={-1}\n          >\n            <Checkbox\n              checked={values.policy}\n              name=\"policy\"\n              onChange={handleChange}\n            />\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              I have read the\n              {' '}\n              <Link\n                component=\"a\"\n                href=\"#\"\n                color=\"secondary\"\n              >\n                Terms and Conditions\n              </Link>\n            </Typography>\n          </Box> */}\n          {/* {Boolean(touched.policy && errors.policy) && (\n            <FormHelperText error>\n              {errors.policy}\n            </FormHelperText>\n          )} */}\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Create account\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nRegisterForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\n\nRegisterForm.default = {\n  onSubmitSuccess: () => {}\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}