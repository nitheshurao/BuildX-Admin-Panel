{"ast":null,"code":"import _toConsumableArray from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/redhan/Desktop/work/Ecom-Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/redhan/Desktop/work/Ecom-Admin/src/views/projects/ProjectBrowseView/Filter/MultiSelect.js\";\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Checkbox, FormControlLabel, Menu, MenuItem, makeStyles } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    menuItem: {\n      padding: 0\n    },\n    formControlLabel: {\n      padding: theme.spacing(0.5, 2),\n      width: '100%',\n      margin: 0\n    }\n  };\n});\n\nfunction MultiSelect(_ref) {\n  var _this = this;\n\n  var label = _ref.label,\n      options = _ref.options,\n      value = _ref.value,\n      onChange = _ref.onChange;\n  var classes = useStyles();\n  var anchorRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      openMenu = _useState2[0],\n      setOpenMenu = _useState2[1];\n\n  var handleMenuOpen = function handleMenuOpen() {\n    setOpenMenu(true);\n  };\n\n  var handleMenuClose = function handleMenuClose() {\n    setOpenMenu(false);\n  };\n\n  var handleOptionToggle = function handleOptionToggle(event) {\n    var newValue = _toConsumableArray(value);\n\n    if (event.target.checked) {\n      newValue.push(event.target.value);\n    } else {\n      newValue = newValue.filter(function (item) {\n        return item !== event.target.value;\n      });\n    }\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null,\n    /*#__PURE__*/\n    React.createElement(Button, {\n      onClick: handleMenuOpen,\n      ref: anchorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, label,\n    /*#__PURE__*/\n    React.createElement(ArrowDropDownIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    })),\n    /*#__PURE__*/\n    React.createElement(Menu, {\n      anchorEl: anchorRef.current,\n      className: classes.menu,\n      elevation: 1,\n      onClose: handleMenuClose,\n      open: openMenu,\n      PaperProps: {\n        style: {\n          width: 250\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, options.map(function (option) {\n      return (\n        /*#__PURE__*/\n        React.createElement(MenuItem, {\n          className: classes.menuItem,\n          key: option,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }\n        },\n        /*#__PURE__*/\n        React.createElement(FormControlLabel, {\n          className: classes.formControlLabel,\n          control:\n          /*#__PURE__*/\n          React.createElement(Checkbox, {\n            checked: value.indexOf(option) > -1,\n            onClick: handleOptionToggle,\n            value: option,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }\n          }),\n          label: option,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }\n        }))\n      );\n    })))\n  );\n}\n\nMultiSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  value: PropTypes.array.isRequired\n};\nexport default MultiSelect;","map":{"version":3,"sources":["/Users/redhan/Desktop/work/Ecom-Admin/src/views/projects/ProjectBrowseView/Filter/MultiSelect.js"],"names":["React","useState","useRef","PropTypes","Button","Checkbox","FormControlLabel","Menu","MenuItem","makeStyles","ArrowDropDownIcon","useStyles","theme","root","menuItem","padding","formControlLabel","spacing","width","margin","MultiSelect","label","options","value","onChange","classes","anchorRef","openMenu","setOpenMenu","handleMenuOpen","handleMenuClose","handleOptionToggle","event","newValue","target","checked","push","filter","item","current","menu","style","map","option","indexOf","propTypes","string","isRequired","func","array"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  Menu,\n  MenuItem,\n  makeStyles\n} from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  menuItem: {\n    padding: 0\n  },\n  formControlLabel: {\n    padding: theme.spacing(0.5, 2),\n    width: '100%',\n    margin: 0\n  }\n}));\n\nfunction MultiSelect({\n  label,\n  options,\n  value,\n  onChange\n}) {\n  const classes = useStyles();\n  const anchorRef = useRef(null);\n  const [openMenu, setOpenMenu] = useState(false);\n\n  const handleMenuOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = () => {\n    setOpenMenu(false);\n  };\n\n  const handleOptionToggle = (event) => {\n    let newValue = [...value];\n\n    if (event.target.checked) {\n      newValue.push(event.target.value);\n    } else {\n      newValue = newValue.filter((item) => item !== event.target.value);\n    }\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleMenuOpen}\n        ref={anchorRef}\n      >\n        {label}\n        <ArrowDropDownIcon />\n      </Button>\n      <Menu\n        anchorEl={anchorRef.current}\n        className={classes.menu}\n        elevation={1}\n        onClose={handleMenuClose}\n        open={openMenu}\n        PaperProps={{ style: { width: 250 } }}\n      >\n        {options.map((option) => (\n          <MenuItem\n            className={classes.menuItem}\n            key={option}\n          >\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={(\n                <Checkbox\n                  checked={value.indexOf(option) > -1}\n                  onClick={handleOptionToggle}\n                  value={option}\n                />\n              )}\n              label={option}\n            />\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n}\n\nMultiSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  value: PropTypes.array.isRequired\n};\n\nexport default MultiSelect;\n"]},"metadata":{},"sourceType":"module"}